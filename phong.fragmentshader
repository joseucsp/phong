#version 330 core

// datos recibidos del vertex shader despues de interpolacion
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output <- color
out vec3 color;

// datos unifromes a todo el objeto
uniform sampler2D myTextureSampler1;
uniform sampler2D myTextureSampler2;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){
	// Material del objeto tb deberian de ser uniforme
	//vec3 MaterialDiffuseColor = vec3(0.8,0.8,0.8);//texture( myTextureSampler, UV ).rgb;
	
    vec3 MaterialDiffuseColor  = texture(myTextureSampler1, UV).rgb;	  				
	vec3 Normal 			   = texture(myTextureSampler2, UV).rgb;
    vec3 MaterialAmbientColor  = vec3(0.6,0.6,0.6) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(1.0,1.0,1.0);

	//frosbite / cryengine
	vec3 LightColor = vec3(1.0f,1.0f,1.0f);

	//Unreal
	//vec3 LightColor = vec3(1.0f,1.0f,1.0f)*pow(4.0,2)/(pow(distance,2)+0.1f);

	// Normal despues de la interpolacion
	vec3 n = normalize( Normal_cameraspace );
	// Direccion de la luz : fragment -> luz antes de interpolacion era vertex -> luz
	vec3 l = normalize( LightDirection_cameraspace );

	// Coseno del angulo entre la normal y la luz
	// Producto punto ya que los vectos son normalizados
	// clamped  0 - 1
	//  - luz vertical -> 1
	//  - luz perpandicular -> 0
	//  - luz detras de triangulo -> 0
    
	//Codigo aqui

    float cosTheta;	
    cosTheta = dot(n, l);
	cosTheta = clamp(cosTheta, 0.0, 1.0);

    // vector fragmento -> camera antes vertex -> camera
	
    vec3 E = normalize(EyeDirection_cameraspace);
	// reflejamos el vector Descarte (espejo perfecto)
	
	//Codigo aqui
	
    vec3 r = reflect(-l, n);

	// coseno entre luz reflejada y la direccion hacia la camara
	// clamped  0-1
	//  - Miramos en la reflexion -> 1
	//  - nos alejamos de la reflexion -> < 1
	

	//Codigo aqui

    float cosAlpha;
    cosAlpha = dot(r, E);
    cosAlpha = clamp(cosAlpha, 0.0, 1.0);	

	//color = vec3(1.0,1.0,0.0);
	/*color = Codigo aqui*/
    //color = vec3(color * cosTheta);
    
	/*
    if (cosTheta > 0.9){
        color = MaterialDiffuseColor;
    }
    else if (cosTheta > 0.6){
        color = MaterialDiffuseColor * vec3(0.6,0.6,0.6);
    }
    else {
        color = MaterialAmbientColor;
    }

    if (cosAlpha > 9.5){
        color = MaterialSpecularColor;
    }
    */

	color = MaterialDiffuseColor + Normal*cosTheta;// + MaterialSpecularColor * LightColor * pow(cosAlpha, 100);;

	//color = MaterialAmbientColor + MaterialDiffuseColor  * LightColor * cosTheta;

	/*
	color = MaterialAmbientColor + 
            MaterialDiffuseColor  * LightColor * cosTheta +
            MaterialSpecularColor * LightColor * pow(cosAlpha, 100);
	*/
}
